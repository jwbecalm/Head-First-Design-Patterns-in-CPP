@startuml SimpleFactory

namespace factory.simple_factory{

class PizzaStore{
    - SimplePizzaFactory* m_factory
    + PizzaStore(SimplePizzaFactory* factory)
    + Pizza* orderPizza(<color:blue>string type)
}

class SimplePizzaFactory{
    + Pizza* createPizza(<color:blue>string type)
}

abstract class Pizza{
    # string m_name
    + string getName()
    + virtual void prepare()
    + virtual void bake()
    + virtual void cut()
    + virtual void box()
}
class CheesePizza extends Pizza{
    + void prepare()
}
class VeggiePizza extends Pizza{
    + void box()
}

'layout
PizzaStore -[hidden]> SimplePizzaFactory
SimplePizzaFactory -[hidden]> Pizza

PizzaStore --> SimplePizzaFactory: associate(knows a)
SimplePizzaFactory ..> Pizza: depends on(uses a )
' PizzaStore --> Pizza: associate(knows a)
' Association: One object is aware of another; it contains a pointer or reference to another object.
}


namespace factory.factory{
    abstract PizzaStore{
        # virtual Pizza* createPizza(string type) = 0
        + Pizza* orderPizza(string type)
    }
    ' note left of PizzaStore::orderPizza
    ' orderPizza() is defined in the abstract PizzaStore, 
    ' not the subclasses. So, the method has no idea 
    ' which subclass is actually running the code and making the pizzas
    ' end note

    class NYPizzaStore extends PizzaStore{
        + Pizza* createPizza(string type)

    }
    class ChicagoPizzaStore extends PizzaStore{
        + Pizza* createPizza(string type)

    }

    abstract Pizza{
        -string m_name
        + virtual void prepare()
        + virtual bake()
        + virtual cut()
        + virtual box()
        + stirng getName()
        + void setName(string name)

    }
    abstract Pizza 
    ' note left: *normal procedure to order a pizza\n*custom procedure can be override in the subclass

    class NYStyleCheesePizza extends Pizza{
        + void prepare()
    }
    class NYStyleVeggiePizza extends Pizza{
        + void bake()
    }
    class ChicagoStyleCheesePizza extends Pizza{
        + void cut()
    }
    class ChicagoStyleVeggiePizza extends Pizza{
        + void box()
    }

    ' NYPizzaStore ..> Pizza: depends on
    ' ChicagoPizzaStore ..> Pizza: depends on

    PizzaStore ..> Pizza: depends on

    'layout
    PizzaStore -[hidden]> Pizza
    ChicagoStyleVeggiePizza -[hidden]> NYPizzaStore


}

@enduml