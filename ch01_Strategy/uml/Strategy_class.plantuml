@startuml Strategy Pattern

package "Client"{
Abstract class Duck
{
    - FlyBehavior* m_flyBehavior
    - QuackBehavior* m_quackBehavior
    --
    + virtual void display() = 0
    + void performFly()
    + void performQuack()
    + void setFlyBehavior()
    + void setQuackBehavior()
    // other behavior of Duck...
}
note left of Duck::m_flyBehavior
把Duck容易改变的行为<color:blue>封装</color>到对应的Behavior接口中，
end note

note left of Duck::performFly
{   
    // <color:blue>委托</color>对应的接口去完成不同的行为
    m_flyBehavior->fly();  
}

end note

note left of Duck::performQuack
{   
    // <color:blue>委托</color>对应的接口去完成不同的行为
    m_QuackBehavior->quack();  
}
end note

class MallarDuck extends Duck{
    +void display()
}

class RubberDuck extends Duck{
    +void display()
}

}

package "Encapsulate Fly Behavior"{
Duck -->FlyBehavior: has a

interface FlyBehavior{
    + virtual void fly() = 0
}


class FlyWithWings implements FlyBehavior{
    void fly()
}
class FlyNoway implements FlyBehavior{
    void fly()
}
class FlynewWay implements FlyBehavior{
    void fly()
}
}

package "Encapsulate Quack Behavior"{
Duck -->QuackBehavior: has a

interface QuackBehavior{
    + virtual void quack() = 0
}
class SimpleQuack implements QuackBehavior{
    + void quack()
}
class Mute implements QuackBehavior{
    + void quack()
}
class NewQuack implements QuackBehavior{
    + void quack()
}
}
@enduml

