@startuml Command Pattern


class RemoteControl{
    - Command*[] m_onCommands
    - Command*[] m_offCommands
    - Command* m_undoCommand 
    + void setCommand(int slot, Command onCommand, Command offCommand)
    + void onButtonPressed(int slot)
    + void OffButtonPressed(int slot)
    + void undoButtonPressed()
}
note top of RemoteControl: Invoker


interface Command{
    + virtual void execute() = 0
    + virtual void undo() = 0
}
RemoteControl -> Command: has


    


class Light{
    + void on()
    + void off()
}

class Stereo{
    + void on();
    + void playCD();
    + void setVolume(int volume);
    + void off();
}

package "concrete command"{
' concrete command
class LightOnCommand implements Command{
    - Light* m_light
    + void execute()
    + void undo()
}

class LightOffCommand implements Command{
    - Light* m_light
    + void execute()
    + void undo()
}

class StereoOnCommand implements Command{
    - Stereo* m_stereo
    + void execute()
    + void undo()
}
class StereoOffCommand implements Command{
    - Stereo* m_stereo
    + void execute()
    + void undo()
}
}
' class NoCommand implements Command{
'     + void execute()    // do nothing
'     + void undo()       // do nothing
' }

' note left of LightOffCommand::execute()
'     invoke receiver.action(); eg.on(),off()    
' end note

Command -[hidden] Light
Light -[hidden]-> RemoteControl

LightOffCommand<-[hidden]-StereoOnCommand
StereoOnCommand -[hidden] StereoOffCommand
LightOnCommand -[hidden] LightOffCommand

LightOffCommand -> Light: has
StereoOnCommand -> Stereo: has
Light <-[hidden] Stereo


@enduml