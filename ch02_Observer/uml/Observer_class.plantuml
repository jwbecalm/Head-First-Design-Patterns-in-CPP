@startuml Observer Pattern
package "Observalble and Observer Interface" {
    Interface Observalble{
        + virtual void addObserver(Observer o) = 0
        + virtual void removeObserver(Observer o) = 0
        + virtual void notifyObservers() = 0
    }
    note left of Observalble::notifyObservers
    for observer in observers,
        call observer.update()
    end note

    Interface Observer{
        + virutal void update() = 0
    }
}



package "Concreat Observalble"{
class WeatherData implements  Observalble{
    ' store the weather data from weather station
    - float m_temperature
    - float m_humidity
    - float m_pressure
    ' store all the observers' pointer in list for nothify when weather data changed
    - std::list<Observer*>m_observers 
    --
    + void addObserver (Observer o)
    + void removeObserver(Observer o) 
    + void notifyObservers()
    ..
    ' when weather data changed, this method will be invoked
    + void measurementChanged()
    ' simulate weaher data changed
    + setWeatherData(float temp, float humid, float pres)
    ' get method for Observer use
    + float getTemperature()
    + float getHumidity()
    + float getPressure()
    ' new get method can be add for future requirement
    ..
}
}

package "Concreat Observer"{
    class CurrentDisplay implements Observer{
        - WeatherData* m_weatherData
        + CurrentDisplay(WeatherData* weatherData)
        + void update()
        + void display()
    }

    class StatDisplay implements Observer{
        - WeatherData* m_weatherData
        + StatDisplay(WeatherData* weatherData)
        + void update()
        + void display()
    }
}
' class ForecastDisplay implements Observer, DisplayElement{
'     - WeatherData* m_weatherData
'     + ForecastDisplay(WeatherData* weatherData)
'     + void update()
'     + void display()
' }
' class ThirdPartyDisplay implements Observer, DisplayElement{
'     - WeatherData* m_weatherData
'     + ThirdPartyDisplay(WeatherData* weatherData)
'     + void update()
'     + void display()
' }

Interface DisplayElement{
    + virtual void display() = 0
    
}


Observalble -->"0..*" Observer
CurrentDisplay --> WeatherData: use a 
StatDisplay --> WeatherData: use a
'ForecastDisplay --> WeatherData
'ThirdPartyDisplay --> WeatherData

DisplayElement <|.. CurrentDisplay
DisplayElement <|.. StatDisplay

'Layout modify
Observalble -[hidden]> Observer 

WeatherData -[hidden]> CurrentDisplay
CurrentDisplay -[hidden]> StatDisplay 


@enduml